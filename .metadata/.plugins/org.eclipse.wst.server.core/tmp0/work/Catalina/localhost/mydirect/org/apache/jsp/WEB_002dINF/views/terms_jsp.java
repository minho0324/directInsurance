/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-11-16 08:53:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class terms_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>terms</title>\r\n");
      out.write("</head>\r\n");
      out.write("<style>\n");
      out.write("	\r\n");
      out.write("	html, body, div, span, applet, object, iframe,\r\n");
      out.write("	h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n");
      out.write("	a, abbr, acronym, address, big, cite, code,\r\n");
      out.write("	del, dfn, em, img, ins, kbd, q, s, samp,\r\n");
      out.write("	small, strike, strong, sub, sup, tt, var,\r\n");
      out.write("	b, u, i, center,\r\n");
      out.write("	dl, dt, dd, ol, ul, li,\r\n");
      out.write("	fieldset, form, label, legend,\r\n");
      out.write("	table, caption, tbody, tfoot, thead, tr, th, td,\r\n");
      out.write("	article, aside, canvas, details, embed, \r\n");
      out.write("	figure, figcaption, footer, header, hgroup, \r\n");
      out.write("	menu, nav, output, ruby, section, summary,\r\n");
      out.write("	time, mark, audio, video {\r\n");
      out.write("		margin: 0;\r\n");
      out.write("		padding: 0;\r\n");
      out.write("		border: 0;\r\n");
      out.write("		font-size: 100%;\r\n");
      out.write("		font: inherit;\r\n");
      out.write("		vertical-align: baseline;\r\n");
      out.write("	}\r\n");
      out.write("	/* HTML5 display-role reset for older browsers */\r\n");
      out.write("	article, aside, details, figcaption, figure, \r\n");
      out.write("	footer, header, hgroup, menu, nav, section {\r\n");
      out.write("		display: block;\r\n");
      out.write("	}\r\n");
      out.write("	body {\r\n");
      out.write("		line-height: 1;\r\n");
      out.write("	}\r\n");
      out.write("	ol, ul {\r\n");
      out.write("		list-style: none;\r\n");
      out.write("	}\r\n");
      out.write("	blockquote, q {\r\n");
      out.write("		quotes: none;\r\n");
      out.write("	}\r\n");
      out.write("	blockquote:before, blockquote:after,\r\n");
      out.write("	q:before, q:after {\r\n");
      out.write("		content: '';\r\n");
      out.write("		content: none;\r\n");
      out.write("	}\r\n");
      out.write("	table {\r\n");
      out.write("		border-collapse: collapse;\r\n");
      out.write("		border-spacing: 0;\r\n");
      out.write("	}\r\n");
      out.write("\n");
      out.write("</style>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
